

executor_loop(node, env, &last_status)
│
├─> handle_builtin_if_applicable(node, &env, &last_status)
│    └─> exec_builtin(...)  // built-in senza fork
│
├─> fork()
│    └─> exec_child(...)  // processo figlio
│         ├─> pipe in/out → dup2
│         ├─> apply_redirects(node->red)
│         ├─> exec_builtin(..., is_child=1) || execve(...)
│
├─> chiusura pipe, gestione fd
│
└─> wait() // salva ultimo exit status in $?





| Da Pipex                                     | Riutilizzo nell'executor                                                    |
| -------------------------------------------- | --------------------------------------------------------------------------- |
| `dup2()` con gestione errori → `switch_fd()` | Identico, con `perror + exit`                                               |
| `open()` per file >, <                       | Adattato in `apply_redirects()` con switch su `redir->type`                 |
| `execve()` con path risolto                  | Presente in `exec_child()` via `resolve_path()`                             |
| `pipe()`/`fork()` loop                       | Trasformato in `executor_loop()` con handling di pipe `prev_fd` e `pipe_fd` |
| `waitpid()` finale                           | Gestione completa di exit status                                            |





Note per il parser:
node->next = pipe a destra
node->red = lista di redirect (già pronta)
node->cmd_argv = array char ** già splittato, es. {"ls", "-l", NULL} (cmd_argv da rinominare in argv per compatibilità)
env = lista linkata condivisa, da cui si estraggono le variabili
heredoc dovrebbe venire gestito dal parser prima dell’executor (in red->fd)





Per gestire correttamente l'env:

| Funzione           | Serve a...                                         |
| ------------------ | -------------------------------------------------- |
| `join_key_value()` | Costruire stringhe `"VAR=VAL"`                     |
| `env_to_array()`   | Convertire `t_env` in `char **envp` per `execve()` |

La funzione `join_key_value(char *key, char *value)` serve a **costruire una stringa in formato `KEY=VALUE`**, esattamente come quelle contenute in `char **envp` che viene passato alla `execve()`.

Quando dobbiamo eseguire un comando binario (es. `/bin/ls`, `grep`, ecc.), serve fornirgli un array di stringhe (`char **envp`) con le variabili d’ambiente nel formato standard:
"PATH=/usr/bin:/bin"
"HOME=/home/signore"
"USER=root"

Probabilmente dovrò convertire t_env in un array e usare join_key_value().
Valutiamo se seguire la strada delle liste per la comodità di deallocare env quando si esegue set/unset.

typedef struct s_env {
    char *key;
    char *value;
    int exported;
    struct s_env *next;
} t_env;



Cosa succede dentro resolve_path?

    ft_strchr(cmd, '/')
    → "ls" non contiene '/' → continuiamo

    Ottiene PATH da env
    → "PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/bin"
    → path_var = "/usr/local/sbin:/usr/local/bin:/usr/bin:/bin"

    Divide path_var in array paths:

paths[0] = "/usr/local/sbin"
paths[1] = "/usr/local/bin"
paths[2] = "/usr/bin"
paths[3] = "/bin"
paths[4] = NULL

Loop su ogni path:

    join_path(paths[0], "ls") → "/usr/local/sbin/ls"
    → access(..., X_OK) fallisce (non esiste o non eseguibile)

    join_path(paths[1], "ls") → "/usr/local/bin/ls"
    → idem

    join_path(paths[2], "ls") → "/usr/bin/ls"
    → access(..., X_OK) successo

Ritorna "/usr/bin/ls" come path eseguibile.